diff -urN dist.orig/sphinx/cmd/make_mode.py dist/sphinx/cmd/make_mode.py
--- dist.orig/sphinx/cmd/make_mode.py	2020-03-29 10:12:50.011647462 +0900
+++ dist/sphinx/cmd/make_mode.py	2020-03-29 10:23:41.121770929 +0900
@@ -102,7 +102,7 @@
             makecmd = self.makecmd
         try:
             with cd(self.builddir_join('latex')):
-                return subprocess.call([makecmd, 'all-pdf'])
+                return subprocess.run([makecmd, 'all-pdf'], env=_new_env())
         except OSError:
             print('Error: Failed to run: %s' % makecmd)
             return 1
@@ -117,7 +117,7 @@
             makecmd = self.makecmd
         try:
             with cd(self.builddir_join('latex')):
-                return subprocess.call([makecmd, 'all-pdf'])
+                return subprocess.run([makecmd, 'all-pdf'], env=_new_env())
         except OSError:
             print('Error: Failed to run: %s' % makecmd)
             return 1
@@ -127,7 +127,7 @@
             return 1
         try:
             with cd(self.builddir_join('texinfo')):
-                return subprocess.call([self.makecmd, 'info'])
+                return subprocess.run([self.makecmd, 'info'], env=_new_env())
         except OSError:
             print('Error: Failed to run: %s' % self.makecmd)
             return 1
@@ -164,3 +164,14 @@
     if hasattr(make, run_method):
         return getattr(make, run_method)()
     return make.run_generic_build(args[0])
+
+
+def _new_env():
+    env = dict(os.environ)  # make a copy of the environment
+    lp_key = 'LD_LIBRARY_PATH'  # for Linux and *BSD.
+    lp_orig = env.get(lp_key + '_ORIG')  # pyinstaller >= 20160820 has this
+    if lp_orig is not None:
+        env[lp_key] = lp_orig  # restore the original, unmodified value
+    else:
+        env.pop(lp_key, None)  # last resort: remove the env var
+    return env
diff -urN dist.orig/sphinx/ext/graphviz.py dist/sphinx/ext/graphviz.py
--- dist.orig/sphinx/ext/graphviz.py	2020-03-29 10:12:50.021647691 +0900
+++ dist/sphinx/ext/graphviz.py	2020-03-29 10:25:23.613343558 +0900
@@ -9,6 +9,7 @@
     :license: BSD, see LICENSE for details.
 """
 
+import os
 import posixpath
 import re
 import subprocess
@@ -245,7 +246,7 @@
 
     try:
         ret = subprocess.run(dot_args, input=code.encode(), capture_output=True,
-                             cwd=cwd, check=True)
+                             cwd=cwd, env=_new_env(), check=True)
         if not path.isfile(outfn):
             raise GraphvizError(__('dot did not produce an output file:\n[stderr]\n%r\n'
                                    '[stdout]\n%r') % (ret.stderr, ret.stdout))
@@ -394,6 +395,17 @@
         copy_asset(src, dst)
 
 
+def _new_env():
+    env = dict(os.environ)  # make a copy of the environment
+    lp_key = 'LD_LIBRARY_PATH'  # for Linux and *BSD.
+    lp_orig = env.get(lp_key + '_ORIG')  # pyinstaller >= 20160820 has this
+    if lp_orig is not None:
+        env[lp_key] = lp_orig  # restore the original, unmodified value
+    else:
+        env.pop(lp_key, None)  # last resort: remove the env var
+    return env
+
+
 def setup(app: Sphinx) -> dict[str, Any]:
     app.add_node(graphviz,
                  html=(html_visit_graphviz, None),
diff -urN dist.orig/sphinx/ext/imgconverter.py dist/sphinx/ext/imgconverter.py
--- dist.orig/sphinx/ext/imgconverter.py	2020-03-29 10:12:50.021647691 +0900
+++ dist/sphinx/ext/imgconverter.py	2020-03-29 10:26:54.524735899 +0900
@@ -8,6 +8,7 @@
     :license: BSD, see LICENSE for details.
 """

+import os
 import subprocess
 import sys
 from subprocess import PIPE, CalledProcessError
@@ -35,7 +36,7 @@
         try:
             args = [self.config.image_converter, '-version']
             logger.debug('Invoking %r ...', args)
-            subprocess.run(args, capture_output=True, check=True)
+            subprocess.run(args, capture_output=True, env=_new_env(), check=True)
             return True
         except OSError:
             logger.warning(__('convert command %r cannot be run, '
@@ -59,7 +60,7 @@
                     self.config.image_converter_args +
                     [_from, _to])
             logger.debug('Invoking %r ...', args)
-            subprocess.run(args, capture_output=True, check=True)
+            subprocess.run(args, capture_output=True, env=_new_env(), check=True)
             return True
         except OSError:
             logger.warning(__('convert command %r cannot be run, '
@@ -72,6 +73,17 @@
                                  (exc.stderr, exc.stdout)) from exc


+def _new_env():
+    env = dict(os.environ)  # make a copy of the environment
+    lp_key = 'LD_LIBRARY_PATH'  # for Linux and *BSD.
+    lp_orig = env.get(lp_key + '_ORIG')  # pyinstaller >= 20160820 has this
+    if lp_orig is not None:
+        env[lp_key] = lp_orig  # restore the original, unmodified value
+    else:
+        env.pop(lp_key, None)  # last resort: remove the env var
+    return env
+
+
 def setup(app: Sphinx) -> dict[str, Any]:
     app.add_post_transform(ImagemagickConverter)
     if sys.platform == 'win32':
diff -urN dist.orig/sphinx/ext/imgmath.py dist/sphinx/ext/imgmath.py
--- dist.orig/sphinx/ext/imgmath.py	2020-03-29 10:12:50.021647691 +0900
+++ dist/sphinx/ext/imgmath.py	2020-03-29 10:28:09.475882256 +0900
@@ -9,6 +9,7 @@
 from __future__ import annotations

 import base64
+import os
 import re
 import shutil
 import subprocess
@@ -163,7 +164,7 @@

     try:
         subprocess.run(command, capture_output=True, cwd=tempdir, check=True,
-                       encoding='ascii')
+                       encoding='ascii', env=_new_env())
         return path.join(tempdir, 'math.dvi')
     except OSError as exc:
         logger.warning(__('LaTeX command %r cannot be run (needed for math '
@@ -177,7 +178,7 @@
 def convert_dvi_to_image(command: List[str], name: str) -> Tuple[bytes, bytes]:
     """Convert DVI file to specific image format."""
     try:
-        ret = subprocess.run(command, capture_output=True, check=True, encoding='ascii')
+        ret = subprocess.run(command, capture_output=True, check=True, encoding='ascii', env=_new_env())
         return ret.stdout, ret.stderr
     except OSError as exc:
         logger.warning(__('%s command %r cannot be run (needed for math '
@@ -379,6 +380,17 @@
                  RemovedInSphinx40Warning)


+def _new_env():
+    env = dict(os.environ)  # make a copy of the environment
+    lp_key = 'LD_LIBRARY_PATH'  # for Linux and *BSD.
+    lp_orig = env.get(lp_key + '_ORIG')  # pyinstaller >= 20160820 has this
+    if lp_orig is not None:
+        env[lp_key] = lp_orig  # restore the original, unmodified value
+    else:
+        env.pop(lp_key, None)  # last resort: remove the env var
+    return env
+
+
 def setup(app: Sphinx) -> dict[str, Any]:
     app.add_html_math_renderer('imgmath',
                                (html_visit_math, None),
